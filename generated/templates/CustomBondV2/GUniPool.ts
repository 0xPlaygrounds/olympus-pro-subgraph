// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get burnAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityBurned(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FeesEarned extends ethereum.Event {
  get params(): FeesEarned__Params {
    return new FeesEarned__Params(this);
  }
}

export class FeesEarned__Params {
  _event: FeesEarned;

  constructor(event: FeesEarned) {
    this._event = event;
  }

  get feesEarned0(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feesEarned1(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount0In(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidityMinted(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Rebalance extends ethereum.Event {
  get params(): Rebalance__Params {
    return new Rebalance__Params(this);
  }
}

export class Rebalance__Params {
  _event: Rebalance;

  constructor(event: Rebalance) {
    this._event = event;
  }

  get lowerTick_(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get upperTick_(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get liquidityBefore(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get liquidityAfter(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SetManagerFee extends ethereum.Event {
  get params(): SetManagerFee__Params {
    return new SetManagerFee__Params(this);
  }
}

export class SetManagerFee__Params {
  _event: SetManagerFee;

  constructor(event: SetManagerFee) {
    this._event = event;
  }

  get managerFee(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateAdminTreasury extends ethereum.Event {
  get params(): UpdateAdminTreasury__Params {
    return new UpdateAdminTreasury__Params(this);
  }
}

export class UpdateAdminTreasury__Params {
  _event: UpdateAdminTreasury;

  constructor(event: UpdateAdminTreasury) {
    this._event = event;
  }

  get oldAdminTreasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdminTreasury(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateGelatoParams extends ethereum.Event {
  get params(): UpdateGelatoParams__Params {
    return new UpdateGelatoParams__Params(this);
  }
}

export class UpdateGelatoParams__Params {
  _event: UpdateGelatoParams;

  constructor(event: UpdateGelatoParams) {
    this._event = event;
  }

  get gelatoRebalanceBPS(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get gelatoWithdrawBPS(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get gelatoSlippageBPS(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get gelatoSlippageInterval(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class GUniPool__burnResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GUniPool__getMintAmountsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GUniPool__getUnderlyingBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GUniPool__getUnderlyingBalancesAtPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class GUniPool__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class GUniPool extends ethereum.SmartContract {
  static bind(address: Address): GUniPool {
    return new GUniPool("GUniPool", address);
  }

  GELATO(): Address {
    let result = super.call("GELATO", "GELATO():(address)", []);

    return result[0].toAddress();
  }

  try_GELATO(): ethereum.CallResult<Address> {
    let result = super.tryCall("GELATO", "GELATO():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(burnAmount: BigInt, receiver: Address): GUniPool__burnResult {
    let result = super.call(
      "burn",
      "burn(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromAddress(receiver)
      ]
    );

    return new GUniPool__burnResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_burn(
    burnAmount: BigInt,
    receiver: Address
  ): ethereum.CallResult<GUniPool__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(burnAmount),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GUniPool__burnResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gelatoBalance0(): BigInt {
    let result = super.call("gelatoBalance0", "gelatoBalance0():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gelatoBalance0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gelatoBalance0",
      "gelatoBalance0():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gelatoBalance1(): BigInt {
    let result = super.call("gelatoBalance1", "gelatoBalance1():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gelatoBalance1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gelatoBalance1",
      "gelatoBalance1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gelatoFeeBPS(): i32 {
    let result = super.call("gelatoFeeBPS", "gelatoFeeBPS():(uint16)", []);

    return result[0].toI32();
  }

  try_gelatoFeeBPS(): ethereum.CallResult<i32> {
    let result = super.tryCall("gelatoFeeBPS", "gelatoFeeBPS():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gelatoRebalanceBPS(): i32 {
    let result = super.call(
      "gelatoRebalanceBPS",
      "gelatoRebalanceBPS():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_gelatoRebalanceBPS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "gelatoRebalanceBPS",
      "gelatoRebalanceBPS():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gelatoSlippageBPS(): i32 {
    let result = super.call(
      "gelatoSlippageBPS",
      "gelatoSlippageBPS():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_gelatoSlippageBPS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "gelatoSlippageBPS",
      "gelatoSlippageBPS():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  gelatoSlippageInterval(): BigInt {
    let result = super.call(
      "gelatoSlippageInterval",
      "gelatoSlippageInterval():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_gelatoSlippageInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gelatoSlippageInterval",
      "gelatoSlippageInterval():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gelatoWithdrawBPS(): i32 {
    let result = super.call(
      "gelatoWithdrawBPS",
      "gelatoWithdrawBPS():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_gelatoWithdrawBPS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "gelatoWithdrawBPS",
      "gelatoWithdrawBPS():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getMintAmounts(
    amount0Max: BigInt,
    amount1Max: BigInt
  ): GUniPool__getMintAmountsResult {
    let result = super.call(
      "getMintAmounts",
      "getMintAmounts(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0Max),
        ethereum.Value.fromUnsignedBigInt(amount1Max)
      ]
    );

    return new GUniPool__getMintAmountsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getMintAmounts(
    amount0Max: BigInt,
    amount1Max: BigInt
  ): ethereum.CallResult<GUniPool__getMintAmountsResult> {
    let result = super.tryCall(
      "getMintAmounts",
      "getMintAmounts(uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount0Max),
        ethereum.Value.fromUnsignedBigInt(amount1Max)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GUniPool__getMintAmountsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getPositionID(): Bytes {
    let result = super.call("getPositionID", "getPositionID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getPositionID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPositionID",
      "getPositionID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUnderlyingBalances(): GUniPool__getUnderlyingBalancesResult {
    let result = super.call(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      []
    );

    return new GUniPool__getUnderlyingBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUnderlyingBalances(): ethereum.CallResult<
    GUniPool__getUnderlyingBalancesResult
  > {
    let result = super.tryCall(
      "getUnderlyingBalances",
      "getUnderlyingBalances():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GUniPool__getUnderlyingBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getUnderlyingBalancesAtPrice(
    sqrtRatioX96: BigInt
  ): GUniPool__getUnderlyingBalancesAtPriceResult {
    let result = super.call(
      "getUnderlyingBalancesAtPrice",
      "getUnderlyingBalancesAtPrice(uint160):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(sqrtRatioX96)]
    );

    return new GUniPool__getUnderlyingBalancesAtPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getUnderlyingBalancesAtPrice(
    sqrtRatioX96: BigInt
  ): ethereum.CallResult<GUniPool__getUnderlyingBalancesAtPriceResult> {
    let result = super.tryCall(
      "getUnderlyingBalancesAtPrice",
      "getUnderlyingBalancesAtPrice(uint160):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(sqrtRatioX96)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GUniPool__getUnderlyingBalancesAtPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lowerTick(): i32 {
    let result = super.call("lowerTick", "lowerTick():(int24)", []);

    return result[0].toI32();
  }

  try_lowerTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("lowerTick", "lowerTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerBalance0(): BigInt {
    let result = super.call(
      "managerBalance0",
      "managerBalance0():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalance0(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalance0",
      "managerBalance0():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerBalance1(): BigInt {
    let result = super.call(
      "managerBalance1",
      "managerBalance1():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_managerBalance1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "managerBalance1",
      "managerBalance1():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  managerFeeBPS(): i32 {
    let result = super.call("managerFeeBPS", "managerFeeBPS():(uint16)", []);

    return result[0].toI32();
  }

  try_managerFeeBPS(): ethereum.CallResult<i32> {
    let result = super.tryCall("managerFeeBPS", "managerFeeBPS():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  managerTreasury(): Address {
    let result = super.call(
      "managerTreasury",
      "managerTreasury():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_managerTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "managerTreasury",
      "managerTreasury():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mint(mintAmount: BigInt, receiver: Address): GUniPool__mintResult {
    let result = super.call(
      "mint",
      "mint(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromAddress(receiver)
      ]
    );

    return new GUniPool__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_mint(
    mintAmount: BigInt,
    receiver: Address
  ): ethereum.CallResult<GUniPool__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(uint256,address):(uint256,uint256,uint128)",
      [
        ethereum.Value.fromUnsignedBigInt(mintAmount),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GUniPool__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  token0(): Address {
    let result = super.call("token0", "token0():(address)", []);

    return result[0].toAddress();
  }

  try_token0(): ethereum.CallResult<Address> {
    let result = super.tryCall("token0", "token0():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token1(): Address {
    let result = super.call("token1", "token1():(address)", []);

    return result[0].toAddress();
  }

  try_token1(): ethereum.CallResult<Address> {
    let result = super.tryCall("token1", "token1():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  upperTick(): i32 {
    let result = super.call("upperTick", "upperTick():(int24)", []);

    return result[0].toI32();
  }

  try_upperTick(): ethereum.CallResult<i32> {
    let result = super.tryCall("upperTick", "upperTick():(int24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gelato(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get burnAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityBurned(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecutiveRebalanceCall extends ethereum.Call {
  get inputs(): ExecutiveRebalanceCall__Inputs {
    return new ExecutiveRebalanceCall__Inputs(this);
  }

  get outputs(): ExecutiveRebalanceCall__Outputs {
    return new ExecutiveRebalanceCall__Outputs(this);
  }
}

export class ExecutiveRebalanceCall__Inputs {
  _call: ExecutiveRebalanceCall;

  constructor(call: ExecutiveRebalanceCall) {
    this._call = call;
  }

  get newLowerTick(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newUpperTick(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get swapThresholdPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get swapAmountBPS(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class ExecutiveRebalanceCall__Outputs {
  _call: ExecutiveRebalanceCall;

  constructor(call: ExecutiveRebalanceCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _pool(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _managerFeeBPS(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _lowerTick(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _upperTick(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _manager_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeManagerFeeCall extends ethereum.Call {
  get inputs(): InitializeManagerFeeCall__Inputs {
    return new InitializeManagerFeeCall__Inputs(this);
  }

  get outputs(): InitializeManagerFeeCall__Outputs {
    return new InitializeManagerFeeCall__Outputs(this);
  }
}

export class InitializeManagerFeeCall__Inputs {
  _call: InitializeManagerFeeCall;

  constructor(call: InitializeManagerFeeCall) {
    this._call = call;
  }

  get _managerFeeBPS(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class InitializeManagerFeeCall__Outputs {
  _call: InitializeManagerFeeCall;

  constructor(call: InitializeManagerFeeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get liquidityMinted(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get swapThresholdPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get swapAmountBPS(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get zeroForOne(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get paymentToken(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UniswapV3MintCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3MintCallbackCall__Inputs {
    return new UniswapV3MintCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3MintCallbackCall__Outputs {
    return new UniswapV3MintCallbackCall__Outputs(this);
  }
}

export class UniswapV3MintCallbackCall__Inputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }

  get amount0Owed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Owed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3MintCallbackCall__Outputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UpdateGelatoParamsCall extends ethereum.Call {
  get inputs(): UpdateGelatoParamsCall__Inputs {
    return new UpdateGelatoParamsCall__Inputs(this);
  }

  get outputs(): UpdateGelatoParamsCall__Outputs {
    return new UpdateGelatoParamsCall__Outputs(this);
  }
}

export class UpdateGelatoParamsCall__Inputs {
  _call: UpdateGelatoParamsCall;

  constructor(call: UpdateGelatoParamsCall) {
    this._call = call;
  }

  get newRebalanceBPS(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newWithdrawBPS(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get newSlippageBPS(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get newSlippageInterval(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get newTreasury(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class UpdateGelatoParamsCall__Outputs {
  _call: UpdateGelatoParamsCall;

  constructor(call: UpdateGelatoParamsCall) {
    this._call = call;
  }
}

export class WithdrawGelatoBalanceCall extends ethereum.Call {
  get inputs(): WithdrawGelatoBalanceCall__Inputs {
    return new WithdrawGelatoBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawGelatoBalanceCall__Outputs {
    return new WithdrawGelatoBalanceCall__Outputs(this);
  }
}

export class WithdrawGelatoBalanceCall__Inputs {
  _call: WithdrawGelatoBalanceCall;

  constructor(call: WithdrawGelatoBalanceCall) {
    this._call = call;
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawGelatoBalanceCall__Outputs {
  _call: WithdrawGelatoBalanceCall;

  constructor(call: WithdrawGelatoBalanceCall) {
    this._call = call;
  }
}

export class WithdrawManagerBalanceCall extends ethereum.Call {
  get inputs(): WithdrawManagerBalanceCall__Inputs {
    return new WithdrawManagerBalanceCall__Inputs(this);
  }

  get outputs(): WithdrawManagerBalanceCall__Outputs {
    return new WithdrawManagerBalanceCall__Outputs(this);
  }
}

export class WithdrawManagerBalanceCall__Inputs {
  _call: WithdrawManagerBalanceCall;

  constructor(call: WithdrawManagerBalanceCall) {
    this._call = call;
  }

  get feeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get feeToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawManagerBalanceCall__Outputs {
  _call: WithdrawManagerBalanceCall;

  constructor(call: WithdrawManagerBalanceCall) {
    this._call = call;
  }
}
